// Generated by CoffeeScript 1.8.0
(function() {
  var async, bcrypt, crypto, _;

  _ = require("lodash");

  bcrypt = require('bcrypt');

  crypto = require('crypto');

  async = require('async');

  module.exports = function(configs) {
    var defaults, exports, generateRememberMeToken;
    if ((configs != null ? configs.loadUser : void 0) == null) {
      throw "loadUser must be defined";
    }
    if ((configs != null ? configs.deleteToken : void 0) == null) {
      throw "deleteToken must be defined";
    }
    if ((configs != null ? configs.deleteAllTokens : void 0) == null) {
      throw "deleteAllTokens must be defined";
    }
    if ((configs != null ? configs.saveNewToken : void 0) == null) {
      throw "saveNewToken must be defined";
    }
    defaults = {
      cookieName: 'rememberme',
      maxAge: 90 * 24 * 60 * 60 * 1000,
      checkAuthenticated: function(req) {
        var _ref;
        return (req.session != null) && (((_ref = req.session) != null ? _ref.user : void 0) != null);
      },
      loadUser: function(cookieUser, cb) {},
      setUserInSession: function(req, sessionUser) {
        return req.session.user = sessionUser;
      },
      deleteToken: function(sessionUser, token, cb) {},
      deleteAllTokens: function(sessionUser, cb) {},
      saveNewToken: function(sessionUser, newToken, cb) {}
    };
    configs = _.merge(defaults, configs);
    generateRememberMeToken = function(sessionUser, currentToken, cookieUser, res, cb) {
      return async.waterfall([
        function(cb) {
          if (currentToken != null) {
            return configs.deleteToken(sessionUser, currentToken, cb);
          } else {
            return cb(null);
          }
        }, function(cb) {
          return crypto.randomBytes(32, cb);
        }, function(newTokenBuffer, cb) {
          var newToken;
          newToken = newTokenBuffer.toString('hex');
          return configs.saveNewToken(sessionUser, crypto.createHash('md5').update(newToken).digest('hex'), function(err) {
            return cb(err, newToken);
          });
        }
      ], function(err, newToken) {
        if (err != null) {
          return cb(err);
        }
        res.cookie(configs.cookieName, {
          user: cookieUser,
          token: newToken
        }, {
          maxAge: configs.maxAge,
          httpOnly: true
        });
        return cb(null);
      });
    };
    exports = {};
    exports.login = function(sessionUser, cookieUser, res, cb) {
      return generateRememberMeToken(sessionUser, null, cookieUser, res, cb);
    };
    exports.logout = function(req, res, sessionUser, cb) {
      var currentToken, _ref;
      currentToken = (_ref = req.cookies[configs.cookieName]) != null ? _ref.token : void 0;
      res.clearCookie(configs.cookieName);
      if (currentToken != null) {
        return configs.deleteToken(sessionUser, currentToken, cb);
      } else {
        return cb(null);
      }
    };
    exports.middleware = function(req, res, next) {
      var cookieUser, remembermeCookie;
      if (configs.checkAuthenticated(req)) {
        return next();
      }
      remembermeCookie = req.cookies[configs.cookieName];
      if (!(((remembermeCookie != null ? remembermeCookie.user : void 0) != null) && ((remembermeCookie != null ? remembermeCookie.token : void 0) != null))) {
        return next();
      }
      cookieUser = remembermeCookie.user;
      return async.waterfall([
        function(cb) {
          return configs.loadUser(cookieUser, cb);
        }, function(userRememberMeTokens, sessionUser, cb) {
          if ((sessionUser != null) && (userRememberMeTokens != null)) {
            if (_.contains(userRememberMeTokens, crypto.createHash('md5').update(remembermeCookie.token).digest('hex'))) {
              configs.setUserInSession(req, sessionUser);
              return generateRememberMeToken(sessionUser, remembermeCookie != null ? remembermeCookie.token : void 0, cookieUser, res, cb);
            } else {
              res.clearCookie(configs.cookieName);
              return configs.deleteAllTokens(sessionUser, cb);
            }
          } else {
            res.clearCookie(configs.cookieName);
            return cb(null);
          }
        }
      ], function(err) {
        return next(err);
      });
    };
    return exports;
  };

}).call(this);
